@model Capitol_Theatre.Data.Movie

@{
    var mode = ViewBag.Mode as string ?? "Create";
    bool isEdit = mode.Equals("Edit", StringComparison.OrdinalIgnoreCase);

    ViewData["Title"] = isEdit ? "Edit Movie" : "Add New Movie";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 class="my-4">@((isEdit ? "✏️ Edit Movie" : "➕ Add New Movie"))</h2>

<div class="card bg-light p-4">
    <form asp-action="Index" method="post">
        @Html.AntiForgeryToken()

        <input type="hidden" name="mode" value="@mode" />
        @if (isEdit)
        {
            <input type="hidden" asp-for="Id" />
        }

        <div asp-validation-summary="All" class="text-danger mb-3"></div>

        <div class="mb-3">
            <label asp-for="Title" class="form-label"></label>
            <input asp-for="Title" class="form-control" />
            <span asp-validation-for="Title" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label class="form-label">Poster Image</label>
            <div id="posterSelectedFilename" class="mb-2 text-muted small" style="display:@(string.IsNullOrEmpty(Model.PosterPath) ? "none" : "block")">
                <strong>Selected:</strong> @System.IO.Path.GetFileName(Model.PosterPath)
            </div>
            <img id="PosterPathPreview" src="@Model.PosterPath"
                 alt="Poster Preview"
                 style="display:@(string.IsNullOrEmpty(Model.PosterPath) ? "none" : "block"); max-height:200px; margin-bottom:10px;"
                 class="img-thumbnail" />
            <input type="hidden" asp-for="PosterPath" id="PosterPath" />
            <button type="button" class="btn btn-primary" onclick="openImageSelector('PosterPath', 'posters')">
                Upload or Choose Poster
            </button>
        </div>

        <div class="mb-3">
            <label asp-for="Description" class="form-label"></label>
            <textarea asp-for="Description" class="form-control" rows="4"></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="RatingId" class="form-label">Rating</label>
            <select asp-for="RatingId" class="form-select" asp-items="ViewBag.Ratings"></select>
            <span asp-validation-for="RatingId" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Warning" class="form-label"></label>
            <input asp-for="Warning" class="form-control" />
            <span asp-validation-for="Warning" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="WarningColor" class="form-label">Warning Color</label>
            <input asp-for="WarningColor" class="form-control form-control-color" type="color" />
            <span asp-validation-for="WarningColor" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="TrailerUrl" class="form-label"></label>
            <input asp-for="TrailerUrl" class="form-control" />
        </div>

        <div class="mb-3">
            <label asp-for="runtime" class="form-label">Runtime (minutes)</label>
            <input asp-for="runtime" class="form-control" type="number" min="0" />
            <span asp-validation-for="runtime" class="text-danger"></span>
        </div>

        <!-- FullCalendar Integration -->
        <div class="mb-3">
            <label class="form-label">Showtimes</label>
            <div class="row">
                <div class="col-md-8">
                    <div id="calendar"></div>
                </div>
               
                <div class="col-md-4">
                    <div>
                        <label class="form-label">Add Dates Without Times</label>
                        <button type="button" class="btn btn-secondary" id="addNoTimesBtn">Add Date(s) Without Times</button>
                    </div>
                    <label class="form-label mt-3">Add Time</label>
                    <input type="time" id="timePicker" class="form-control mb-2" />
                    <button type="button" class="btn btn-outline-success mb-3" onclick="addTimeToSelectedDate()">Add Time</button>

                    <div>
                        <strong>Selected Dates & Times</strong>
                        <ul id="dateTimeList" class="list-group"></ul>
                    </div>
                </div> 

 
            </div>
            @*<input type="hidden" name="ShowDateTimeEntries" id="ShowDateTimeEntries" />*@
            <input type="hidden" name="ShowtimesJson" id="ShowtimesJson" />
        </div>
        <input type="hidden" name="NoTimeDaysJson" id="NoTimeDaysJson" />
        <button type="submit" class="btn btn-success">@((isEdit ? "Save Changes" : "Create Movie"))</button>
        <a asp-action="ManageMovies" asp-controller="Admin" class="btn btn-secondary">Cancel</a>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="/js/uploadModalHelper.js"></script>

    <script>
        let calendar;
        const showtimes = new Map();
        const noTimeDates = new Set();
        let selectedDateRange = [];

        document.addEventListener('DOMContentLoaded', function () {
            const calendarEl = document.getElementById('calendar');
            calendar = new FullCalendar.Calendar(calendarEl, {
                displayEventTime: false,
                initialView: 'dayGridMonth',
                selectable: true,
                selectMirror: true,
                unselectAuto: false,
                select: function (info) {
                    selectedDateRange = [];
                    let current = new Date(info.start);
                    while (current < info.end) {
                        selectedDateRange.push(new Date(current));
                        current.setDate(current.getDate() + 1);
                    }
                },
                events: []
            });

            calendar.render();

            @if (isEdit && Model.MovieShowDates != null)
            {
                    foreach (var dateGroup in Model.MovieShowDates.OrderBy(d => d.ShowDate))
                    {
                            var dateStr = dateGroup.ShowDate.ToString("yyyy-MM-dd");

                            if (dateGroup.Showtimes != null && dateGroup.Showtimes.Any())
                            {
                                    foreach (var time in dateGroup.Showtimes.OrderBy(t => t.StartTime))
                                    {
                                            var timeStr = time.StartTime.ToString("HH:mm");
                                            <text>preloadShowtime("@dateStr", "@timeStr");</text>
                                    }
                            }
                            else
                            {
                                    <text>
                                        noTimeDates.add("@dateStr");
                                        calendar.addEvent({
                                            id: "no-time-@dateStr",
                                            title: "No Showtimes",
                                            start: "@dateStr",
                                            allDay: true,
                                            backgroundColor: "#f8d7da",
                                            borderColor: "#f5c2c7"
                                        });
                                    </text>
                            }
                    }
            }

            updateNoTimeHiddenField();
            updateList();
        });

        document.getElementById('addNoTimesBtn')?.addEventListener('click', () => {
            if (!selectedDateRange.length) return;

            selectedDateRange.forEach(date => {
                const key = date.toISOString().split('T')[0];

                if (showtimes.has(key)) {
                    if (!confirm(`"${key}" already has showtimes. This will remove them and replace with 'No Showtimes'. Continue?`)) {
                        return;
                    }

                    showtimes.get(key).forEach(entry => {
                        const event = calendar.getEventById(entry.id);
                        if (event) event.remove();
                    });
                    showtimes.delete(key);
                }

                if (noTimeDates.has(key)) return;

                noTimeDates.add(key);

                const item = document.createElement("li");
                item.className = "list-group-item d-flex justify-content-between align-items-center ps-4 small";
                item.id = "noTime_" + key;
                item.innerHTML = `
                    <span>No Showtimes</span>
                    <i class="fa-solid fa-circle-xmark text-danger ms-2" style="cursor:pointer;" onclick="removeNoTimeDate('${key}')"></i>
                `;
                document.getElementById("dateTimeList").appendChild(item);

                calendar.addEvent({
                    id: "no-time-" + key,
                    title: "No Showtimes",
                    start: key,
                    allDay: true,
                    backgroundColor: "#f8d7da",
                    borderColor: "#f5c2c7"
                });
            });

            updateNoTimeHiddenField();
            updateList();
        });

        function addTimeToSelectedDate() {
            if (!selectedDateRange.length) return;

            const time = document.getElementById('timePicker').value;
            if (!time) return;

            const [hour, minute] = time.split(":"), hour12 = ((+hour % 12) || 12), ampm = +hour >= 12 ? "PM" : "AM";
            const formattedTime = `${hour12}:${minute} ${ampm}`;

            selectedDateRange.forEach(selectedDate => {
                const dateKey = selectedDate.toISOString().split('T')[0];

                if (noTimeDates.has(dateKey)) {
                    noTimeDates.delete(dateKey);
                    document.getElementById("noTime_" + dateKey)?.remove();

                    const event = calendar.getEventById("no-time-" + dateKey);
                    if (event) event.remove();

                    updateNoTimeHiddenField();
                }

                if (!showtimes.has(dateKey)) showtimes.set(dateKey, []);
                const times = showtimes.get(dateKey);
                if (times.some(t => t.time === time)) return;

                const guid = generateGUID();
                times.push({ time, id: guid });

                calendar.addEvent({
                    id: guid,
                    title: formattedTime,
                    start: `${dateKey}T${time}`,
                    allDay: false
                });
            });

            updateList();
            updateHiddenField();
        }

        function preloadShowtime(date, time) {
            if (!showtimes.has(date)) showtimes.set(date, []);
            const times = showtimes.get(date);
            if (times.some(t => t.time === time)) return;

            const guid = generateGUID();
            times.push({ time, id: guid });

            const [hour, minute] = time.split(":"), hour12 = ((+hour % 12) || 12), ampm = +hour >= 12 ? "PM" : "AM";
            const formattedTime = `${hour12}:${minute} ${ampm}`;

            calendar.addEvent({
                id: guid,
                title: formattedTime,
                start: `${date}T${time}`,
                allDay: false
            });

            updateList();
            updateHiddenField();
        }

        function removeDateTime(date, time) {
            const times = showtimes.get(date);
            if (!times) return;

            const index = times.findIndex(t => t.time === time);
            if (index === -1) return;

            const entry = times[index];
            const event = calendar.getEventById(entry.id);
            if (event) event.remove();

            times.splice(index, 1);
            if (times.length === 0) showtimes.delete(date);

            updateList();
            updateHiddenField();
        }

        function removeNoTimeDate(key) {
            noTimeDates.delete(key);
            document.getElementById("noTime_" + key)?.remove();

            const event = calendar.getEventById("no-time-" + key);
            if (event) event.remove();

            updateNoTimeHiddenField();
            updateList();
        }

        function generateGUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                const r = Math.random() * 16 | 0,
                    v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        function updateHiddenField() {
            const entries = [];
            for (const [date, times] of showtimes.entries()) {
                times.forEach(entry => {
                    entries.push({ date: date, time: entry.time, id: entry.id });
                });
            }
            document.getElementById("ShowtimesJson").value = JSON.stringify(entries);
        }

        function updateNoTimeHiddenField() {
            document.getElementById("NoTimeDaysJson").value = JSON.stringify([...noTimeDates]);
        }

        function updateList() {
            const list = document.getElementById("dateTimeList");
            list.innerHTML = "";

            const allDates = new Set([...showtimes.keys(), ...noTimeDates]);
            const sortedDates = Array.from(allDates).sort();

            sortedDates.forEach(date => {
                const dateHeader = document.createElement("li");
                dateHeader.className = "list-group-item fw-bold small bg-light";
                dateHeader.textContent = date;
                list.appendChild(dateHeader);

                if (showtimes.has(date)) {
                    showtimes.get(date).forEach(entry => {
                        const [hour, minute] = entry.time.split(":"), hour12 = ((+hour % 12) || 12), ampm = +hour >= 12 ? "PM" : "AM";
                        const formattedTime = `${hour12}:${minute} ${ampm}`;

                        const timeItem = document.createElement("li");
                        timeItem.className = "list-group-item d-flex justify-content-between align-items-center ps-4";
                        timeItem.innerHTML = `
                            <span class="small">${formattedTime}</span>
                            <i class="fa-solid fa-circle-xmark text-danger ms-2" style="cursor:pointer;" onclick="removeDateTime('${date}', '${entry.time}')"></i>
                        `;
                        list.appendChild(timeItem);
                    });
                }

                if (noTimeDates.has(date)) {
                    const noTimeItem = document.createElement("li");
                    noTimeItem.className = "list-group-item d-flex justify-content-between align-items-center ps-4 small";
                    noTimeItem.innerHTML = `
                        <span>No Showtimes</span>
                        <i class="fa-solid fa-circle-xmark text-danger ms-2" style="cursor:pointer;" onclick="removeNoTimeDate('${date}')"></i>
                    `;
                    list.appendChild(noTimeItem);
                }
            });
        }
    </script>
}

