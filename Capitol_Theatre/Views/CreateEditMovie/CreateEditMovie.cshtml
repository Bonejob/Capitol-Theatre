@model Capitol_Theatre.Data.Movie

@{
    var mode = ViewBag.Mode as string ?? "Create";
    bool isEdit = mode.Equals("Edit", StringComparison.OrdinalIgnoreCase);

    ViewData["Title"] = isEdit ? "Edit Movie" : "Add New Movie";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 class="my-4">@((isEdit ? "✏️ Edit Movie" : "➕ Add New Movie"))</h2>

<div class="card bg-light p-4">
    <form asp-action="Index" method="post">
        @Html.AntiForgeryToken()

        <input type="hidden" name="mode" value="@mode" />
        @if (isEdit)
        {
            <input type="hidden" asp-for="Id" />
        }

        <div asp-validation-summary="All" class="text-danger mb-3"></div>
        
        <div class="mb-3">
            <label asp-for="Title" class="form-label"></label>
            <input asp-for="Title" class="form-control" />
            <span asp-validation-for="Title" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label class="form-label">Poster Image</label>

            @* Display current poster file name, with ID for dynamic updates *@
            <div id="posterSelectedFilename" class="mb-2 text-muted small" style="display:@(string.IsNullOrEmpty(Model.PosterPath) ? "none" : "block")">
                <strong>Selected:</strong> @System.IO.Path.GetFileName(Model.PosterPath)
            </div>

            <img id="PosterPathPreview" src="@Model.PosterPath"
                 alt="Poster Preview"
                 style="display:@(string.IsNullOrEmpty(Model.PosterPath) ? "none" : "block");
                max-height:200px; margin-bottom:10px;"
                 class="img-thumbnail" />

            <input type="hidden" asp-for="PosterPath" id="PosterPath" />

            <button type="button" class="btn btn-primary"
                    onclick="openImageSelector('PosterPath', 'posters')">
                Upload or Choose Poster
            </button>
        </div>


        <div class="mb-3">
            <label asp-for="Description" class="form-label"></label>
            <textarea asp-for="Description" class="form-control" rows="4"></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="RatingId" class="form-label">Rating</label>
            <select asp-for="RatingId" class="form-select" asp-items="ViewBag.Ratings"></select>
            <span asp-validation-for="RatingId" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="Warning" class="form-label"></label>
            <input asp-for="Warning" class="form-control" />
            <span asp-validation-for="Warning" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="WarningColor" class="form-label">Warning Color</label>
            <input asp-for="WarningColor" class="form-control form-control-color" type="color" />
            <span asp-validation-for="WarningColor" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="TrailerUrl" class="form-label"></label>
            <input asp-for="TrailerUrl" class="form-control" />
        </div>

        <div class="mb-3">
            <label asp-for="runtime" class="form-label">Runtime (minutes)</label>
            <input asp-for="runtime" class="form-control" type="number" min="0" />
            <span asp-validation-for="runtime" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="StartShowingDate" class="form-label">Start Showing</label>
            <input asp-for="StartShowingDate" class="form-control" type="date" />
            <span asp-validation-for="StartShowingDate" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="EndShowingDate" class="form-label">End Showing</label>
            <input asp-for="EndShowingDate" class="form-control" type="date" />
            <span asp-validation-for="EndShowingDate" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label class="form-label">Add Showtimes</label>
            <div class="d-flex align-items-end gap-2">
                <select class="form-select" id="daySelector">
                    @foreach (DayOfWeek day in Enum.GetValues(typeof(DayOfWeek)))
                    {
                        <option value="@day">@day</option>
                    }
                </select>

                <input type="time" class="form-control" id="timeInput" value="19:30" />

                <button type="button" class="btn btn-primary" onclick="addShowtime()">Add</button>
            </div>

            <ul class="list-group mt-3" id="showtimeList"></ul>

            <input type="hidden" name="ShowtimeEntries" id="ShowtimeEntries" />
        </div>

        <div class="mb-3">
            <label class="form-label">Run Length (days)</label>
            <input class="form-control" value="@(Model.RunLength ?? 0)" readonly disabled />
        </div>

        <button type="submit" class="btn btn-success">@((isEdit ? "Save Changes" : "Create Movie"))</button>
        <a asp-action="ManageMovies" asp-controller="Admin" class="btn btn-secondary">Cancel</a>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="/js/uploadModalHelper.js"></script>

    <script>
        function selectPoster(path) {
            document.getElementById('PosterPath').value = path;
            const preview = document.getElementById('posterPreview');
            preview.src = path;
            preview.style.display = 'block';
        }

        function addShowtime() {
            const day = document.getElementById("daySelector").value;
            const time = document.getElementById("timeInput").value;
            if (!time) return;

            const entry = `${day}|${time}`;
            showtimes.push(entry);
            document.getElementById("ShowtimeEntries").value = showtimes.join(",");

            const listItem = document.createElement("li");
            listItem.className = "list-group-item";

            const [hour, minute] = time.split(':');
            const hour12 = ((+hour % 12) || 12);
            const formattedTime = `${hour12}:${minute}`;

            listItem.innerHTML = `${day} at ${formattedTime} <button type="button" class="btn btn-sm btn-danger float-end" onclick="removeShowtime('${entry}', this)">Remove</button>`;
            document.getElementById("showtimeList").appendChild(listItem);
        }

        function removeShowtime(entry, button) {
            const index = showtimes.indexOf(entry);
            if (index !== -1) {
                showtimes.splice(index, 1);
                document.getElementById("ShowtimeEntries").value = showtimes.join(",");
                button.closest("li").remove();
            }
        }

        const showtimes = [];

        @if (isEdit && Model.Showtimes != null)
        {
            foreach (var s in Model.Showtimes.OrderBy(s => s.StartTime))
            {
                var day = s.StartTime.DayOfWeek;
                var time = s.StartTime.ToString("HH:mm");
                <text>addShowtimeFromServer("@day", "@time");</text>
            }
        }

        function addShowtimeFromServer(day, time) {
            const entry = `${day}|${time}`;
            showtimes.push(entry);
            document.getElementById("ShowtimeEntries").value = showtimes.join(",");

            const listItem = document.createElement("li");
            listItem.className = "list-group-item";

            const [hour, minute] = time.split(':');
            const hour12 = ((+hour % 12) || 12);
            const formattedTime = `${hour12}:${minute}`;

            listItem.innerHTML = `${day} at ${formattedTime} <button type="button" class="btn btn-sm btn-danger float-end" onclick="removeShowtime('${entry}', this)">Remove</button>`;
            document.getElementById("showtimeList").appendChild(listItem);
        }
    </script>
}
