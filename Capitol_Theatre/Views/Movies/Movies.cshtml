@model IEnumerable<Capitol_Theatre.Data.Movie>
@inject Capitol_Theatre.Services.ISiteSettingsService SiteSettingsService

@{
    var siteSettings = SiteSettingsService.GetSettings();
    var mode = ViewData["Mode"]?.ToString()?.ToLowerInvariant() ?? "nowshowing";
    var title = ViewData["Title"]?.ToString() ?? "Movies";

    var today = DateTime.Today;
    DateTime start, end;
    DateTime? nextFriday = null;

    if (mode == "nextweek")
    {
        start = today.AddDays(7 - ((int)today.DayOfWeek + 2) % 7);
        end = start.AddDays(6);
    }
    else if (mode == "comingsoon")
    {
        start = today.AddDays(14 - ((int)today.DayOfWeek + 2) % 7);
        end = DateTime.MaxValue;
        nextFriday = start;
    }
    else // nowshowing
    {
        start = today.AddDays(-((int)today.DayOfWeek + 2) % 7);
        end = start.AddDays(6);
    }
}

@functions {
    private string GetGroupedShowtimeRanges(IEnumerable<(DayOfWeek Day, string Time)> input)
    {
        var dayOrder = new Dictionary<DayOfWeek, int>
        {
            { DayOfWeek.Friday, 0 }, { DayOfWeek.Saturday, 1 }, { DayOfWeek.Sunday, 2 },
            { DayOfWeek.Monday, 3 }, { DayOfWeek.Tuesday, 4 }, { DayOfWeek.Wednesday, 5 }, { DayOfWeek.Thursday, 6 }
        };

        var dayGroups = input
            .GroupBy(x => x.Day)
            .Select(g => new
            {
                Day = g.Key,
                Times = g.Select(x => DateTime.ParseExact(x.Time, "h:mm tt", null))
                         .Distinct()
                         .OrderBy(t => t)
                         .Select(t => t.ToString("h:mm tt"))
                         .ToList(),
                Order = dayOrder[g.Key]
            })
            .OrderBy(g => g.Order)
            .ToList();

        var result = new List<string>();
        int i = 0;
        while (i < dayGroups.Count)
        {
            var start = i;
            var times = dayGroups[i].Times;

            while (i + 1 < dayGroups.Count &&
                   dayGroups[i + 1].Order == dayGroups[i].Order + 1 &&
                   dayGroups[i + 1].Times.SequenceEqual(times))
            {
                i++;
            }

            var end = i;
            string dayLabel = start == end
                ? dayGroups[start].Day.ToString().Substring(0, 3)
                : $"{dayGroups[start].Day.ToString().Substring(0, 3)}–{dayGroups[end].Day.ToString().Substring(0, 3)}";

            result.Add($"{dayLabel} {string.Join(", ", times)}");
            i++;
        }

        return string.Join(", ", result);
    }
}

<div class="container py-4">
    <h2 class="mb-1">@title</h2>

    @if (mode == "nowshowing" || mode == "nextweek")
    {
        <h5 class="text-muted mb-4">Fri @(start.ToString("MMMM d")) to Thurs @(end.ToString("MMMM d"))</h5>
    }
    else if (mode == "comingsoon" && nextFriday.HasValue)
    {
        <h5 class="text-muted mb-4">Listings are subject to change</h5>
    }

    <div class="d-flex flex-wrap gap-4 justify-content-center justify-content-md-start">
        @foreach (var movie in Model.Where(m =>
                (mode == "comingsoon"
                && m.MovieShowDates != null
                && m.MovieShowDates.Any(d => d.ShowDate >= DateOnly.FromDateTime(start))) ||
                (mode != "comingsoon")))
        {
            var startDateOnly = DateOnly.FromDateTime(start);
            var endDateOnly = DateOnly.FromDateTime(end);

            var filteredShowDates = movie.MovieShowDates?
            .Where(d => d.ShowDate >= startDateOnly && d.ShowDate <= endDateOnly)
            .Where(d => d.Showtimes != null && d.Showtimes.Any())
            .ToList();

            var hasFutureDateOnly = movie.MovieShowDates?
            .Any(d => d.ShowDate >= DateOnly.FromDateTime(start) && (d.Showtimes == null || !d.Showtimes.Any())) == true;

            if (mode == "comingsoon" && !filteredShowDates.Any() && !hasFutureDateOnly)
            {
                continue;
            }

            var eveningDays = filteredShowDates?
            .SelectMany(d => d.Showtimes
            .Where(s => s.StartTime.Hour >= 17)
            .Select(s => ((Day: d.ShowDate.DayOfWeek, Time: s.StartTime.ToString("h:mm tt")))))
            .Distinct()
            .ToList();

            var matineeDays = filteredShowDates?
            .SelectMany(d => d.Showtimes
            .Where(s => s.StartTime.Hour < 17)
            .Select(s => ((Day: d.ShowDate.DayOfWeek, Time: s.StartTime.ToString("h:mm tt")))))
            .Distinct()
            .ToList();

            DateOnly? lastShowDate = (filteredShowDates != null && filteredShowDates.Any())
            ? filteredShowDates.Max(d => d.ShowDate)
            : null;

            <div class="card shadow-sm" style="width: 24rem; background-color: @siteSettings.CardBackgroundColor;">
                <div class="poster-container" data-trailer="@movie.TrailerUrl" onclick="handlePosterClick(this)">
                    <img src="@movie.PosterPath" class="card-img-top img-fluid" alt="@movie.Title Poster">
                    @if (!string.IsNullOrWhiteSpace(movie.Description))
                    {
                        <div class="poster-overlay">
                            @movie.Description
                            @if (!string.IsNullOrWhiteSpace(movie.TrailerUrl))
                            {
                                <text>&#10;&#10;Click to watch the trailer!</text>
                            }
                        </div>
                    }
                </div>

                <div class="card-body" style="background-color: @siteSettings.CardBackgroundColor;">
                    <h4 class="card-title fw-semibold">@movie.Title</h4>

                    @if (eveningDays?.Any() == true)
                    {
                        <p class="mb-1"><strong>Evenings:</strong> @GetGroupedShowtimeRanges(eveningDays)</p>
                    }

                    @if (matineeDays?.Any() == true)
                    {
                        <p class="mb-1"><strong>Matinées:</strong> @GetGroupedShowtimeRanges(matineeDays)</p>
                    }

                    @if (!string.IsNullOrWhiteSpace(movie.ManualLastShowingText))
                    {
                        var parsed = DateTime.TryParse(movie.ManualLastShowingText, out var manualDate);
                        if (parsed)
                        {
                            <p class="mb-1"><strong>Last Showing:</strong> @manualDate.ToString("dddd MMM d")</p>
                        }
                    }


                    @if (movie.runtime.HasValue)
                    {
                        var h = movie.runtime.Value / 60;
                        var m = movie.runtime.Value % 60;
                        <p class="mb-1"><strong>Runtime:</strong> @($"{h}h {m}m")</p>
                    }

                    <p class="mb-0">
                        <strong>Rating:</strong> @movie.Rating?.Code
                        @if (!string.IsNullOrWhiteSpace(movie.Warning))
                        {
                            <span style="color:@movie.WarningColor"> – @movie.Warning</span>
                        }
                    </p>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        function handlePosterClick(container) {
            const isMobile = window.innerWidth < 768;
            const trailerUrl = container.dataset.trailer;
            const overlay = container.querySelector('.poster-overlay');

            if (!trailerUrl) return;

            if (!isMobile) {
                window.open(trailerUrl, '_blank');
                return;
            }

            if (container.dataset.clicked === "true") {
                container.dataset.clicked = "false";
                window.open(trailerUrl, '_blank');
                return;
            }

            document.querySelectorAll('.poster-container').forEach(c => c.dataset.clicked = "false");
            document.querySelectorAll('.poster-overlay').forEach(o => o.classList.remove('active'));

            container.dataset.clicked = "true";
            overlay.classList.add('active');
        }

        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.poster-container').forEach(container => {
                container.addEventListener('mouseleave', function () {
                    const overlay = container.querySelector('.poster-overlay');
                    if (overlay) overlay.classList.remove('active');
                });
                container.addEventListener('touchend', function () {
                    const overlay = container.querySelector('.poster-overlay');
                    if (overlay) overlay.classList.remove('active');
                });
                container.addEventListener('touchcancel', function () {
                    const overlay = container.querySelector('.poster-overlay');
                    if (overlay) overlay.classList.remove('active');
                });
            });
        });
    </script>
}
